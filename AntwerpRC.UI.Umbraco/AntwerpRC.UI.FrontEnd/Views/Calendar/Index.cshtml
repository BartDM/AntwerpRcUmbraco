@model List<AntwerpRC.BDO.CalenderOverviewItem>
@{
    ViewBag.Title = "Index";
    var tr = new HtmlString("<div class='row'>");
    var trclose = new HtmlString("</div>");

}
@section Header
{
    <script src="@Url.Content("~/Scripts/Calendar/Index.cshtml.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/calendar.css")" rel="stylesheet" type="text/css" />
}


@{
    var startDate = new DateTime(ViewBag.Year, ViewBag.Month, 1, 0, 0, 0);
    var endDate = startDate.AddMonths(1).AddDays(-1);
    var test = startDate.DayOfWeek;
    var emptyStartDays = startDate.DayOfWeek.GetHashCode() - 1;
    if (emptyStartDays < 0)
    {
        emptyStartDays = 6;
    }
    var cellsForFirstLine = 7 - emptyStartDays + 1;
    var counter = 0;
}

<p>Showing from @startDate till @endDate</p>


<div class="calendar span12">
    <div class="month-header row">
        <div class="month cell header">
            @Html.ActionLink("prev", "Index", new { Month = ViewBag.Month == 1 ? 12 : ViewBag.Month - 1, Year = ViewBag.Month == 1 ? ViewBag.Year - 1 : ViewBag.Year })
        </div>
        <div class="month cell header"></div>
        <div class="month cell header"></div>
        <div class="month cell header">
            @{
                var retValue = "";
                switch (startDate.Month)
                {
                    case 1: retValue = "Januari";
                        break;
                    case 2: retValue = "Februari";
                        break;
                    case 3: retValue = "Maart";
                        break;
                    case 4: retValue = "April";
                        break;
                    case 5: retValue = "Mei";
                        break;
                    case 6: retValue = "Juni";
                        break;
                    case 7: retValue = "Juli";
                        break;
                    case 8: retValue = "Augustus";
                        break;
                    case 9: retValue = "September";
                        break;
                    case 10: retValue = "Oktober";
                        break;
                    case 11: retValue = "November";
                        break;
                    case 12: retValue = "December";
                        break;
                }
            }
            <span>@retValue @ViewBag.Year</span>
        </div>
        <div class="month cell header"></div>
        <div class="month cell header"></div>
        <div class="month cell header">
            @Html.ActionLink("next", "Index", new { Month = ViewBag.Month == 12 ? 1 : ViewBag.Month + 1, Year = ViewBag.Month == 12 ? ViewBag.Year + 1 : ViewBag.Year })
        </div>
    </div>
    <div class="row">
        <div class="cell header">MA</div>
        <div class="cell header">DI</div>
        <div class="cell header">WO</div>
        <div class="cell header">DO</div>
        <div class="cell header">VR</div>
        <div class="cell header">ZA</div>
        <div class="cell header">ZO</div>
    </div>
    <div class="row">
        @*Start with the empty dates in the first row*@
        @for (int i = 0; i < emptyStartDays; i++)
        {
            <div class="cell empty" data-calendar-date="0"></div>
        }
        @*        Start with filling up the first row*@
        @for (int i = 1; i < cellsForFirstLine; i++)
        {
            <div class="cell" data-calendar-date="@ViewBag.Year/@ViewBag.Month/@i"><span class="date-day">@i</span>
                @{
            var dayDate = new DateTime(ViewBag.Year, ViewBag.Month, i, 0, 0, 0);
            var dates = Model.Where(d => d.StartDate.Date == dayDate.Date).OrderBy(d=>d.PlaceHolder).ToList();
                }
                @for (int j = 0; j < dates.Count(); j++)
                {
                    dates[j].Order = j;
                    @Html.Partial("CalenderItem", dates[j])
                }
            </div>
        }
    </div>
    @*    Setting up the rest of the rows*@
    @for (int i = cellsForFirstLine; i < endDate.Day + 1; i++)
    {
        if (counter % 7 == 0 && counter > 0)
        {
        @trclose
        }

        if (counter % 7 == 0)
        {
        @tr
        }
        <div class="cell" data-calendar-date="@ViewBag.Year/@ViewBag.Month/@i"><span class="date-day">@i</span>
            @{
        var dayDate = new DateTime(ViewBag.Year, ViewBag.Month, i, 0, 0, 0);
        var dates = Model.Where(d => d.StartDate.Date == dayDate.Date).OrderBy(d => !d.PlaceHolder).ToList();
            }
                @for (int j = 0; j < dates.Count(); j++)
                {
                    dates[j].Order = j;
                    @Html.Partial("CalenderItem", dates[j])
                }

        </div>

            counter++;
    }
    @*   Fill up the last row with empty cells*@
    @for (int i = counter; i % 7 != 0; i++)
    {
        <div class="cell empty" data-calendar-date="0"></div>
    }
    @trclose

</div>
